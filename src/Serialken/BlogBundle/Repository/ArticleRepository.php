<?php

namespace Serialken\BlogBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    // recupere les $nombre dernier article
    public function findLastArticle($number) {
        return $this->createQueryBuilder('a')
                ->addOrderBy('a.dateEdition', "DESC")
                ->setMaxResults($number)
                ->getQuery()
                ->getResult();
    }
     
    // recupere les articles dont la categories est $name
    public function getWithCategories(array $name) {
        return $this->createQueryBuilder('a')
                ->join('a.categories', 'c')
                ->where($this->expr()->in('c.nom', $name))
                ->getQuery()
                ->getResult();
    }
    
    // recupere les articles trier par date
    public function getArticles($nombreParPage, $page) {
        if ($page < 1)
        {
            throw new \InvalidArgumentException('L\'argument $page ne peut pas etre inferieur a 1 (valeur: "'.$page.'").');
        }
        
        $offset = ($page-1) * $nombreParPage;
        $qb = $this->createQueryBuilder('a')
                ->leftJoin('a.categories', 'cat')
                ->addSelect('cat')
                ->leftJoin('a.image', 'i')
                ->addSelect('i')
                ->setFirstResult($offset)
                ->setMaxResults($nombreParPage)
                ->orderBy('a.date', 'DESC')
                ->getQuery();
        // on definit l article a partir duquel commencÃ© la liste
        //et le nombre d'articles a afficher
        //$qb->setFirstResult($offset)->setMaxResults($nombreParPage);
        
        //et on retourne l'objet pour la pagination
        return new Paginator($qb);
    }
}
